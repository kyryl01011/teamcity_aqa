{"name": "Create project as generated user", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'dict'", "trace": "self = <test_project_api.TestProjectManagement object at 0x00000170E117EB10>, super_admin = <entities.user.User object at 0x00000170E12F3C50>\nuser_create = <function user_create.<locals>._user_create at 0x00000170E1302020>, project_data = <function project_data.<locals>._create_project_data at 0x00000170E1302200>\n\n    @allure.title('Create project as generated user')\n    @allure.description('Super-admin creates new user, new user creates project and verify it exists')\n    @allure.story('As project admin create project')\n    @allure.feature('Manage projects')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.link('https://www.jetbrains.com/help/teamcity/rest/create-and-delete-projects.html', name='documentation')\n    def test_successfully_create_project_as_user(self, super_admin, user_create, project_data):\n        with allure.step('Create test user with fake user-data, generate fake project data'):\n            new_user = user_create(Roles.PROJECT_ADMIN.value)\n            new_user.api_manager.auth_api.auth_and_get_csrf_token(new_user.creds)\n>           fake_project_data = project_data()\n\ntests\\backend\\test_project_api.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:21: in _create_project_data\n    allure.attach(project_data.model_dump(), name='Generated project data', attachment_type=allure.attachment_type.JSON)\nvenv\\Lib\\site-packages\\allure_commons\\_allure.py:210: in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\allure_pytest\\listener.py:252: in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\Lib\\site-packages\\allure_commons\\reporter.py:165: in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x00000170E11CAA50>\nbody = {'copyAllAssociatedSettings': True, 'id': 'IbZUj7JhsBN', 'name': 'trial', 'parentProject': {'locator': '_Root'}}\nfile_name = 'fbe13901-c8ca-4757-9737-4a159f452ece-attachment.json'\n\n    @hookimpl\n    def report_attached_data(self, body, file_name):\n        destination = self._report_dir / file_name\n        with open(destination, 'wb') as attached_file:\n            if isinstance(body, str):\n                attached_file.write(body.encode('utf-8'))\n            else:\n>               attached_file.write(body)\nE               TypeError: a bytes-like object is required, not 'dict'\n\nvenv\\Lib\\site-packages\\allure_commons\\logger.py:48: TypeError"}, "description": "Super-admin creates new user, new user creates project and verify it exists", "steps": [{"name": "Create test user with fake user-data, generate fake project data", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'dict'\n", "trace": "  File \"C:\\Apps\\teamcity-tests\\tests\\backend\\test_project_api.py\", line 54, in test_successfully_create_project_as_user\n    fake_project_data = project_data()\n  File \"C:\\Apps\\teamcity-tests\\conftest.py\", line 21, in _create_project_data\n    allure.attach(project_data.model_dump(), name='Generated project data', attachment_type=allure.attachment_type.JSON)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 210, in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_hooks.py\", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_manager.py\", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    raise exception.with_traceback(exception.__traceback__)\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\allure_pytest\\listener.py\", line 252, in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\allure_commons\\reporter.py\", line 165, in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_hooks.py\", line 513, in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_manager.py\", line 120, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    raise exception.with_traceback(exception.__traceback__)\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Apps\\teamcity-tests\\venv\\Lib\\site-packages\\allure_commons\\logger.py\", line 48, in report_attached_data\n    attached_file.write(body)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^\n"}, "steps": [{"name": "Create user with data: {'username': 'season', 'password': 'ZCoRhJ6HMzq', 'email': 'dpatterson@example.org', 'roles': {'role': [{'roleId': 'PROJECT_ADMIN', 'scope': 'g'}]}}", "status": "passed", "steps": [{"name": "Sending POST request to http://localhost:8111/app/rest/users with data: {'username': 'season', 'password': 'ZCoRhJ6HMzq', 'email': 'dpatterson@example.org', 'roles': {'role': [{'roleId': 'PROJECT_ADMIN', 'scope': 'g'}]}}, expected_status: 200", "status": "passed", "start": 1747077420891, "stop": 1747077420961}], "start": 1747077420891, "stop": 1747077420961}, {"name": "Auth user with creds: \"('season', 'ZCoRhJ6HMzq')\" and get csrf token", "status": "passed", "steps": [{"name": "Sending GET request to http://localhost:8111/authenticationTest.html?csrf with data: None, expected_status: 200", "status": "passed", "start": 1747077420961, "stop": 1747077420977}, {"name": "Updating session headers: {'X-TC-CSRF-Token': 'd7371078-701d-4b5a-92af-67a3156f447f'}", "status": "passed", "start": 1747077420978, "stop": 1747077420978}], "start": 1747077420961, "stop": 1747077420978}], "attachments": [{"name": "Generated project data", "source": "fbe13901-c8ca-4757-9737-4a159f452ece-attachment.json", "type": "application/json"}], "start": 1747077420891, "stop": 1747077420978}], "attachments": [{"name": "log", "source": "22296908-672b-453b-9284-0c8fc7add2c1-attachment.txt", "type": "text/plain"}], "start": 1747077420891, "stop": 1747077420980, "uuid": "88c8e880-be16-4968-a863-50e4dd908c3a", "historyId": "94a54749db93b535134dc742bb0323c9", "testCaseId": "94a54749db93b535134dc742bb0323c9", "fullName": "tests.backend.test_project_api.TestProjectManagement#test_successfully_create_project_as_user", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "As project admin create project"}, {"name": "feature", "value": "Manage projects"}, {"name": "parentSuite", "value": "tests.backend"}, {"name": "suite", "value": "test_project_api"}, {"name": "subSuite", "value": "TestProjectManagement"}, {"name": "host", "value": "apachai"}, {"name": "thread", "value": "16176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.backend.test_project_api"}], "links": [{"type": "link", "url": "https://www.jetbrains.com/help/teamcity/rest/create-and-delete-projects.html", "name": "documentation"}]}